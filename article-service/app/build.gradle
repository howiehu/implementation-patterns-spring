plugins {
    id 'org.springframework.boot' version '2.4.3'
}

dependencies {
    // Gradle Module 可被用作描述和实现分层架构及依赖关系
    implementation project(':protocol')
    implementation project(':domain')
    implementation project(':gateway')

    implementation 'org.springframework.boot:spring-boot-starter'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // 此处引入 Spring Data Jpa 为了在 Application 级别启用事务管理 @EnableTransactionManagement
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // 利用 Spring Boot DevTools 优化开发环境的开发调试
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // 测试环境引入 Flyway 配合 Spring Data Jpa 实现测试环境下的数据库 Schema 自动迁移和重置
    testImplementation 'org.flywaydb:flyway-core'
    // 由于 API 功能测试环境启动了 Servlet 并使用了 MySql，丧失了Spring Data Jpa 的数据库自动重置和事务回滚能力
    // 所以使用 Flyway Test 扩展来实现测试时的数据库迁移和重置
    testImplementation 'org.flywaydb.flyway-test-extensions:flyway-spring-test:7.0.0'

    // 使用 Karate 实现更加面向 Living Document 的单服务 API 功能测试
    testImplementation 'com.intuit.karate:karate-junit5:1.0.0'
}

test {
    useJUnitPlatform()
    // pull karate options into the runtime
    systemProperty "karate.options", System.properties.getProperty("karate.options")
    // pull karate env into the runtime
    systemProperty "karate.env", System.properties.getProperty("karate.env")
    // ensure tests are always run
    outputs.upToDateWhen { false }
}

sourceSets {
    test {
        resources {
            srcDir file('src/test/java')
            exclude '**/*.java'
        }
    }
}

task karateDebug(type: JavaExec) {
    classpath = sourceSets.test.runtimeClasspath
    main = 'com.intuit.karate.cli.Main'
}
